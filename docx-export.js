/**
 * DOCX Export Functionality for Legal Document Automation
 * 
 * This module provides functionality to export the payment table to DOCX format
 * using the 'docx' library for professional document generation.
 */

const fs = require('fs');
const path = require('path');

// Import the main calculation functions
const {
    generatePaymentTable,
    FINANCIAL_PARAMS
} = require('./legal-document-automation.js');

/**
 * Creates a simple DOCX-like structure using basic formatting
 * Note: This is a simplified implementation. For production use,
 * consider using libraries like 'docx' or 'officegen'
 * 
 * @param {Array} tableData - Payment table data
 * @returns {string} Formatted document content
 */
function createDocumentContent(tableData) {
    let content = '';
    
    // Document header
    content += 'LEGAL DOCUMENT AUTOMATION\n';
    content += 'Structured Notes Payment Calculator\n';
    content += '=====================================\n\n';
    
    // Financial parameters section
    content += 'FINANCIAL PARAMETERS:\n';
    content += `Principal Amount: $${FINANCIAL_PARAMS.PRINCIPAL_AMOUNT}\n`;
    content += `Contingent Interest Rate: ${(FINANCIAL_PARAMS.CONTINGENT_INTEREST_RATE * 100)}% per annum\n`;
    content += `Monthly Interest Rate: ${(FINANCIAL_PARAMS.MONTHLY_INTEREST_RATE * 100)}% per month\n`;
    content += `Buffer Threshold: ${(FINANCIAL_PARAMS.BUFFER_THRESHOLD * 100)}% of Initial Value\n`;
    content += `Buffer Amount: ${(FINANCIAL_PARAMS.BUFFER_AMOUNT * 100)}%\n`;
    content += `Contingent Interest Payment: $${FINANCIAL_PARAMS.CONTINGENT_INTEREST_PAYMENT}\n\n`;
    
    // Logic explanation
    content += 'CALCULATION LOGIC:\n';
    content += '1. If Final Value >= Buffer Threshold (90% of Initial Value):\n';
    content += '   Payment = Principal ($1,000) + Contingent Interest ($10.1667)\n\n';
    content += '2. If Final Value < Buffer Threshold (90% of Initial Value):\n';
    content += '   Payment = $1,000 + [$1,000 × (Underlying Return + Buffer Amount)]\n\n';
    
    // Payment table
    content += 'PAYMENT AT MATURITY TABLE:\n';
    content += '(assuming 12.20% per annum Contingent Interest Rate)\n\n';
    content += 'Underlying Return\t\tPayment at Maturity\n';
    content += '================================================\n';
    
    // Use loop to add table data
    for (let i = 0; i < tableData.length; i++) {
        const row = tableData[i];
        content += `${row.underlyingReturnPercent}\t\t\t${row.paymentFormatted}\n`;
    }
    
    content += '================================================\n\n';
    
    // Analysis section
    const protectedReturns = tableData.filter(row => 
        row.paymentAtMaturity === FINANCIAL_PARAMS.PRINCIPAL_AMOUNT + FINANCIAL_PARAMS.CONTINGENT_INTEREST_PAYMENT
    ).length;
    
    content += 'ANALYSIS:\n';
    content += `- Total scenarios analyzed: ${tableData.length}\n`;
    content += `- Scenarios with full protection: ${protectedReturns}\n`;
    content += `- Scenarios with partial loss: ${tableData.length - protectedReturns}\n`;
    content += `- Protection rate: ${((protectedReturns / tableData.length) * 100).toFixed(1)}%\n\n`;
    
    // Risk analysis
    content += 'RISK ANALYSIS:\n';
    content += '- The Buffer Threshold at 90% provides protection for moderate market declines\n';
    content += '- Returns above -10% receive full principal plus interest\n';
    content += '- Returns below -10% experience graduated losses with 10% buffer protection\n';
    content += '- Maximum loss scenario (-100% return) still provides $100 per $1,000 invested\n\n';
    
    // Footer
    content += 'Document generated by Legal Document Automation System\n';
    content += `Generation Date: ${new Date().toISOString()}\n`;
    
    return content;
}

/**
 * Exports the payment table to a text file (simulating DOCX export)
 * 
 * @param {string} filename - Output filename (without extension)
 * @returns {Promise<string>} Path to the created file
 */
async function exportToDocument(filename = 'structured-notes-payment-table') {
    try {
        // Generate the payment table
        const tableData = generatePaymentTable();
        
        if (!tableData || tableData.length === 0) {
            throw new Error('No table data generated');
        }
        
        // Create document content
        const documentContent = createDocumentContent(tableData);
        
        // Create output filename
        const outputPath = path.join(__dirname, `${filename}.txt`);
        
        // Write to file
        await fs.promises.writeFile(outputPath, documentContent, 'utf8');
        
        console.log(`Document exported successfully to: ${outputPath}`);
        console.log(`File size: ${documentContent.length} characters`);
        
        return outputPath;
        
    } catch (error) {
        console.error('Error exporting document:', error.message);
        throw error;
    }
}

/**
 * Creates an HTML version of the document for web display
 * 
 * @param {Array} tableData - Payment table data
 * @returns {string} HTML content
 */
function createHTMLContent(tableData) {
    let html = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Legal Document Automation - Payment Calculator</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #2c3e50;
            text-align: center;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
        }
        h2 {
            color: #34495e;
            margin-top: 30px;
        }
        .params-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        .param-item {
            background-color: #ecf0f1;
            padding: 10px;
            border-radius: 5px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            font-size: 14px;
        }
        th, td {
            border: 1px solid #bdc3c7;
            padding: 12px;
            text-align: center;
        }
        th {
            background-color: #3498db;
            color: white;
            font-weight: bold;
        }
        tr:nth-child(even) {
            background-color: #f8f9fa;
        }
        tr:hover {
            background-color: #e8f4f8;
        }
        .positive {
            color: #27ae60;
            font-weight: bold;
        }
        .negative {
            color: #e74c3c;
        }
        .analysis {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 5px;
            margin: 20px 0;
        }
        .risk-analysis {
            background-color: #fff3cd;
            border: 1px solid #ffeaa7;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Legal Document Automation</h1>
        <h2>Structured Notes Payment Calculator</h2>
        
        <h2>Financial Parameters</h2>
        <div class="params-grid">
            <div class="param-item"><strong>Principal Amount:</strong> $${FINANCIAL_PARAMS.PRINCIPAL_AMOUNT}</div>
            <div class="param-item"><strong>Contingent Interest Rate:</strong> ${(FINANCIAL_PARAMS.CONTINGENT_INTEREST_RATE * 100)}% per annum</div>
            <div class="param-item"><strong>Monthly Interest Rate:</strong> ${(FINANCIAL_PARAMS.MONTHLY_INTEREST_RATE * 100)}% per month</div>
            <div class="param-item"><strong>Buffer Threshold:</strong> ${(FINANCIAL_PARAMS.BUFFER_THRESHOLD * 100)}% of Initial Value</div>
            <div class="param-item"><strong>Buffer Amount:</strong> ${(FINANCIAL_PARAMS.BUFFER_AMOUNT * 100)}%</div>
            <div class="param-item"><strong>Contingent Interest Payment:</strong> $${FINANCIAL_PARAMS.CONTINGENT_INTEREST_PAYMENT}</div>
        </div>
        
        <h2>Calculation Logic</h2>
        <div class="analysis">
            <p><strong>Scenario 1:</strong> If Final Value ≥ Buffer Threshold (90% of Initial Value):</p>
            <p>Payment = Principal ($1,000) + Contingent Interest ($10.1667)</p>
            
            <p><strong>Scenario 2:</strong> If Final Value < Buffer Threshold (90% of Initial Value):</p>
            <p>Payment = $1,000 + [$1,000 × (Underlying Return + Buffer Amount)]</p>
        </div>
        
        <h2>Payment at Maturity Table</h2>
        <p><em>Assuming 12.20% per annum Contingent Interest Rate</em></p>
        
        <table>
            <thead>
                <tr>
                    <th>Underlying Return</th>
                    <th>Payment at Maturity</th>
                    <th>Scenario</th>
                </tr>
            </thead>
            <tbody>`;
    
    // Use loop to add table rows
    for (let i = 0; i < tableData.length; i++) {
        const row = tableData[i];
        const isProtected = row.paymentAtMaturity === FINANCIAL_PARAMS.PRINCIPAL_AMOUNT + FINANCIAL_PARAMS.CONTINGENT_INTEREST_PAYMENT;
        const returnClass = row.underlyingReturn >= 0 ? 'positive' : 'negative';
        const scenario = isProtected ? 'Protected + Interest' : 'Partial Loss';
        
        html += `
                <tr>
                    <td class="${returnClass}">${row.underlyingReturnPercent}</td>
                    <td>${row.paymentFormatted}</td>
                    <td>${scenario}</td>
                </tr>`;
    }
    
    const protectedReturns = tableData.filter(row => 
        row.paymentAtMaturity === FINANCIAL_PARAMS.PRINCIPAL_AMOUNT + FINANCIAL_PARAMS.CONTINGENT_INTEREST_PAYMENT
    ).length;
    
    html += `
            </tbody>
        </table>
        
        <h2>Analysis</h2>
        <div class="analysis">
            <ul>
                <li><strong>Total scenarios analyzed:</strong> ${tableData.length}</li>
                <li><strong>Scenarios with full protection:</strong> ${protectedReturns}</li>
                <li><strong>Scenarios with partial loss:</strong> ${tableData.length - protectedReturns}</li>
                <li><strong>Protection rate:</strong> ${((protectedReturns / tableData.length) * 100).toFixed(1)}%</li>
            </ul>
        </div>
        
        <h2>Risk Analysis</h2>
        <div class="risk-analysis">
            <ul>
                <li>The Buffer Threshold at 90% provides protection for moderate market declines</li>
                <li>Returns above -10% receive full principal plus interest</li>
                <li>Returns below -10% experience graduated losses with 10% buffer protection</li>
                <li>Maximum loss scenario (-100% return) still provides $100 per $1,000 invested</li>
            </ul>
        </div>
        
        <p><em>Document generated by Legal Document Automation System on ${new Date().toLocaleString()}</em></p>
    </div>
</body>
</html>`;
    
    return html;
}

/**
 * Exports the payment table to HTML format
 * 
 * @param {string} filename - Output filename (without extension)
 * @returns {Promise<string>} Path to the created HTML file
 */
async function exportToHTML(filename = 'structured-notes-payment-table') {
    try {
        // Generate the payment table
        const tableData = generatePaymentTable();
        
        if (!tableData || tableData.length === 0) {
            throw new Error('No table data generated');
        }
        
        // Create HTML content
        const htmlContent = createHTMLContent(tableData);
        
        // Create output filename
        const outputPath = path.join(__dirname, `${filename}.html`);
        
        // Write to file
        await fs.promises.writeFile(outputPath, htmlContent, 'utf8');
        
        console.log(`HTML document exported successfully to: ${outputPath}`);
        console.log(`File size: ${htmlContent.length} characters`);
        
        return outputPath;
        
    } catch (error) {
        console.error('Error exporting HTML document:', error.message);
        throw error;
    }
}

/**
 * Main export function that creates both text and HTML versions
 */
async function exportDocuments() {
    try {
        console.log('Starting document export process...');
        
        // Export text version (simulating DOCX)
        const textPath = await exportToDocument();
        
        // Export HTML version
        const htmlPath = await exportToHTML();
        
        console.log('\n=== EXPORT COMPLETE ===');
        console.log(`Text document: ${textPath}`);
        console.log(`HTML document: ${htmlPath}`);
        console.log('========================');
        
        return {
            textPath,
            htmlPath
        };
        
    } catch (error) {
        console.error('Export process failed:', error.message);
        throw error;
    }
}

// Export functions
module.exports = {
    exportToDocument,
    exportToHTML,
    exportDocuments,
    createDocumentContent,
    createHTMLContent
};

// Auto-execute if run directly
if (require.main === module) {
    exportDocuments();
}